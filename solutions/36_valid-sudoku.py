"""
Title   : Valid Sudoku
Number  : 36
Link    : https://leetcode.com/problems/valid-sudoku/
"""

import time
from typing import List
from collections import defaultdict


class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        row = defaultdict(set)
        col = defaultdict(set)
        sub = defaultdict(set)

        is_invalid = False
        for i in range(9):
            for j in range(9):
                sub_i = j//3 + 1 + i//3 * 3
                if board[i][j] == '.': continue
                if (
                    board[i][j] in row[i]
                    or board[i][j] in col[j]
                    or board[i][j] in sub[sub_i]
                ): 
                    is_invalid = True
                    break
                
                row[i].add(board[i][j])
                col[j].add(board[i][j])
                sub[sub_i].add(board[i][j])
            
            if is_invalid:
                break

        return not is_invalid


if __name__ == "__main__":
    s = Solution()

    # Add your test cases here
    # Each test case is {"input": (...args...), "expected": ...}
    tests = [
        {"input": ([["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]], ), "expected": True},
        {"input": ([["8","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]], ), "expected": False},
        {"input": ([[".",".","4",".",".",".","6","3","."],[".",".",".",".",".",".",".",".","."],["5",".",".",".",".",".",".","9","."],[".",".",".","5","6",".",".",".","."],["4",".","3",".",".",".",".",".","1"],[".",".",".","7",".",".",".",".","."],[".",".",".","5",".",".",".",".","."],[".",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."]], ), "expected": False},
        {"input": ([["1","2","3","4","5","6","7","8","."],[".",".",".",".",".",".",".",".","9"],[".",".",".",".",".",".",".",".","2"],[".",".",".",".",".",".",".",".","8"],[".",".",".",".",".",".",".",".","3"],[".",".",".",".",".",".",".",".","7"],[".",".",".",".",".",".",".",".","4"],[".",".",".",".",".",".",".",".","6"],[".",".",".",".",".",".",".",".","5"]], ), "expected": True},
        {"input": ([[".",".",".",".","5",".",".","1","."],[".","4",".","3",".",".",".",".","."],[".",".",".",".",".","3",".",".","1"],["8",".",".",".",".",".",".","2","."],[".",".","2",".","7",".",".",".","."],[".","1","5",".",".",".",".",".","."],[".",".",".",".",".","2",".",".","."],[".","2",".","9",".",".",".",".","."],[".",".","4",".",".",".",".",".","."]], ), "expected": False},
        {"input": ([[".","8","7","6","5","4","3","2","1"],["2",".",".",".",".",".",".",".","."],["3",".",".",".",".",".",".",".","."],["4",".",".",".",".",".",".",".","."],["5",".",".",".",".",".",".",".","."],["6",".",".",".",".",".",".",".","."],["7",".",".",".",".",".",".",".","."],["8",".",".",".",".",".",".",".","."],["9",".",".",".",".",".",".",".","."]], ), "expected": True},
        {"input": ([[".",".","4",".",".",".","5",".","."],[".",".",".",".",".",".",".",".","."],["6","3",".",".",".",".",".","9","."],[".",".",".","4",".","3",".",".","."],["5","6",".",".",".",".","7",".","."],[".","9",".",".",".",".",".",".","1"],[".",".",".",".",".",".",".",".","."],["5",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."]], ), "expected": False},
        {"input": ([[".",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."]], ), "expected": True},
    ]

    for idx, t in enumerate(tests, 1):
        start = time.perf_counter()
        result = s.isValidSudoku(*t["input"])
        end = time.perf_counter()
        runtime = (end - start) * 1000  # ms

        if result == t["expected"]:
            print(f"Test {idx}: PASSED in {runtime:.3f} ms")
        else:
            print(f"Test {idx}: FAILED in {runtime:.3f} ms "
                  f"(expected {t['expected']}, got {result})")

"""
Test 1: PASSED in 0.054 ms
Test 2: PASSED in 0.016 ms
Test 3: PASSED in 0.024 ms
Test 4: PASSED in 0.029 ms
Test 5: PASSED in 0.012 ms
Test 6: PASSED in 0.030 ms
Test 7: PASSED in 0.025 ms
Test 8: PASSED in 0.014 ms
"""